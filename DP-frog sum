// dynamic programming
//qsn 1) The frog jumping 

#include<bits/stdc++.h>
using namespace std;
const int M=1e7+9;
int dp[M];
int h[M];
int frog(int i){
 if(i==0) return 0;
 if(dp[i]!=-1) return dp[i];
 else{
 	int cost=INT_MAX;
 //1 step
 	cost=min(cost,frog(i-1)+abs(h[i]-h[i-1]));
 	if(i>1)
 //2 steps
 		cost=min(cost,frog(i-2)+ abs(h[i]-h[i-2]));
 	return dp[i]=cost;
 }
// for k possible jumps , simply run a loop for k times... (instead of 2 jumps,k there )
// and if(i-j)>=k is the condition...
 // int frog(int i){
 // if(i==0) return 0;
 // if(dp[i]!=-1) return dp[i];
 //  else{
 //	int cost=INT_MAX;
//  for(int j=1;j<=k;j++){
 //  if((i-j)>=0)
 //  cost=min(cost,frog(i-j)+abs(h[i]-h[i-j]));
//    }
//     return dp[i]=cost;
  //  }



}

int main(){
	memset(dp,-1,sizeof(dp));
	int n;
	cin>>n;
	for(int i=0;i<n;i++)
		cin>>h[i];
	cout<<frog(n-1);
	return 0;
}
